web application

-> core technologies -> HTML Css and JavaScript

-> index.html page - static page
-> books -> list of books 

-> variables, operators, 

What is JavaScript

-> high level, interpreted lang 
-> creating interactive web pages applications
-> enable dynamic behavior 
-> pages will be static otherwise and uanable to repond to user interactivons

Key Uses :

-> Client Side Interactivility -> Forms validations, real time updates, animations
-> Server side development ->  node.js -> JS can run on servers as well
-> Mobile apps -> React JS 
-> Game Apps -> 
-> Machine Learning & AI -> TensorFlow.js 

--------------------------------------------------

ES6

-> ES6 -> ECMAScript 2015 -> 
-> many updates have been made to JS
-> modern features 
-> developer freiendly , more powerful

ES6 

-> Arrow functions, Template Literals, Spread Operator, Modules


1. Variables in Js

-> var , let , const

var -> var a
-> ES5
-> Function scoped
-> can be redeclared and updated
-> 

function example() {
    var x =10; // function scope
    if (true) {    
      var x = 20  // same variable x is modified
      console.log(x); // output  = 20
    }
    console.log(x); // output = 20
 }
 example();
-> limitation -> 

let -> create a variable using let
-> Block scoped
-> ES6
-> can be updated but not redeclared in the same scope
-> only accessible within block {}

function example() {
    let y =10; 
    if (true) {    
      let y = 20  // inside block - different variable
      console.log(y); // output  = 20
    }
    console.log(y); // output = 10
 }
 example();
-> safer approach 

const (Constant)
-> ES6
-> block scopes
-> cannot be redeclare and cannot be updated

const z = 30;
z=40; // error

const with objects 
-> using key value pairs
-> person object -> name , age,
-> key value pairs -> {name : "Suman" , age : 25 }

const person = {name : "Suman" , age : 25}
console.log(person);
person.age = 26; // modify the property of an object // allowed
person = {name : "Tanuj"} //reassign entire object // error

------------------------------------------------------------------------

Operators in JavaScript :

-> Arithmetic Operators

->  +, -, *, /, %, ** (exponent) -> 2**5

let a = 5, b= 3;
console.log(a**b) // 5^3
---------------

-> Comparison Operators -> true , false

-> > , < 
-> == -> Equal to (Loose comparison) -> check only value
       -> e.g "5" == 5  // true result bcoz value is same

-> === -> Strict equal to -> checks type and value
       -> e.g "5" === 5 // false result type is not same

-> != -> Not equal e.g "5" != 5 // false
-> !== -> Strict not equal e.g "5" !== 5 // true
-----------------

-> Logical Operators

-> && AND -> both 
console.log( 5>3 && 5>2) 
-> || OR
->! -> NOT 
--------------------

--------------------------------------------------------------

Template Literals (String Interpolation)

-> ES6 introduced
-> allow multiline strings and variable embedding

let name = "Tanuj"
Hello Tanuj Welcome
console.log("Hello, " + name + " Welcome");

With template literal -> use back ticks
let name = "Tanuj"
console.log('Hello, ${name} Welcome`);

Multilins Strings

-> Concatenation
let text = "This is line1. \n" + "This is line2.";
console.log(text);
With template literal :

let text = `This is line1.
            This is line2.`;
console.log(text);

example :
let product = "Laptop"
let price = 55000
console.log(`The price of ${product} is ${price}`);

---------------------------------------------------------------------

Strings, Arrays, Objects

Strings
-> Single Quotes '--'
-> DoubleQuotes "---"
-> Backticks (' ') -> ES6

let text = "  JavaScript Learning ...";

String Methods :

.length() -> returns string length
.toUpperCase() 
.toLowerCase()
.trim() -> delete spaces
.slice() -> extract a string portion, start end
         -> console.log(text.slice(2,10));
.replace(old,new) -> replaces text
         -> console.log(text.replace("Java","Type"));
.split(separator) -> split string into array 
         -> let text = "value1, value2, value3"
         -> text.split(",")

Arrays 
-> let numbers = [10,20,30,40,50]
-> let gadgets = ["Laptop","Smartphone","TV"]

-> index starts from 0
-> access array elements -> index 
-> console.log(gadgets[2]);

Array Methods :
.push() ->  dd item at last of array , end -> gadgets.push("Earphone")
.pop() ->  rmove the last item -> gadgets.pop()
.shift() ->remove first item
.unshift(value) -> Add item at beginning of array, gadgets.unshift("Mic")
.indexOf(value)  -> find the index of value 
.includes(value) -> checks if value exists -> gadgets.include("Earphone")
.slice(start,end) -> return part of an array
.splice(index,count) -> gadgets(1,2) -> start from index 1 and remove 2 elemets
.join(separator) -> convert arry into string -> gadgets.join("-")
.reverse() -> reverse array
.sort() -> sorts array

Looping thorough arrays

-> using for Each
-> gadgets.forEach( (gadget) => console.log(gadget));

-> map() -> return s new arrays
let squaredNumbers = numbrs.map(num => num * num);

-----------------------------------------------------------------------------

Objects

-> key value pairs
let person = {
        name : "Tanuj",
        age : 25,
        hasVoterCard : true
};

Access object prrperties :

Dot notation -> person.age
Bracket notation -> person["key"]
                 -> person["age"] //25

Add / update properties

person.city = "New Delhi";  // Added new property
person.age = 26;
console.log(person)

Delete 

delete person.hasVoterCard;
console.log(person)

Objects can have functions as properties

let user = {
     
    name : "Tnuj",
    greet : function() {
           console.log(`Hello , my name is ${this.name)`);
          }
    };
user.greet();

// Object Destructuring -> ES6

-> extract object properties 
-> shorter syntax

person -> name, age, city

let {name, age, city} = person;
console.log(name); // Tanuj
console.log(age); // 25

// Object Spread Operator (ES6) -> (...)

-> used for copying or merging objects

copy objects

let obj1 = { a:12, b:15 };
let obj2 = { ...obj1, c:20};

merge objects

let userD= {name:"tanuj", age :25};
let userLoc = { city:"ND" , country :"India"};

let userAllD = { ...userD, ...userLoc };
console.log(userAllD);

-----------------------------------------------------


Conidtional and Looping Statements :

if(cond) {}

if(cond) {}
else {}

if(cond) {}
else if (cond2) {}
else if (cond3) {}
else {}

switch :

switch(exp){
case value1 :
             // code block
             break;
default :
         //code block
}

for (let i=1 ;i<=5; i++) {}

for-In Loop -> iterate over object properties

for (let key in person) {
   console.log(key + " : " + person[key])
}

for_Of Loop -> Iterate over Arrays and Strings

gadgets, numbers

for (let gadget of gadgets) {
     console.log(gadget);
}

text -> 

for (let ch of text) {
   console.log(ch)
}

while (cond) {}
do while() {}

-------------------------------------------------------

Functions :

function Fname(parameters) {
     // function body
     return value;
}

function Expression 

-> A function is stored in a variable 
-> anonymous function -> function with no name

const add = function(a,b) {
            return a+b;
           }

console.log(add(4,5));


Arrow Functions -> shorter syntax, automatically bind this

const multiply = (x,y) => x*y;
console.log(multiply(12,23));

Single parameter

const cube = x => x * x * x;
console.log(cube(5));

Multiline body in arrow fucntions

const greet = (name) => { 
                    let message = `Hello, ${name}, Welcome`;
                    return message;
                   };
console.log(greet("Tanuj"));

-> well suited for short fucntions


Higher Order Functions (HOF) :

-> takes another function as an argument
-> return a function

operate -> HOF
function operate (num1, num2, operation) {
           return operation(num1, num2);
}


const multiply = (x,y) => x*y;
const add=x,y) => x + y;

console.log(operate(12,15, add));
console.log(operate(12,15, multiply));

function greeting(message) {
           return function(name) {
              console.log(`${message}, ${name});
           };
}

const hellomsg = greeting("Hello");

hellomsg("Tanuj"); //o/p -> hello Tanuj

----------------------------------------------------------------------

HotelMangementSystem

-> findAvaialbleRooms()
-> function

const hotelRooms = [
    
     {type : "Standard", rice:5000, available : true},
     // ---- 4 objects


];

-> filter room based on min price and max price and avail = true

function findAvaialbleRooms(rooms,minPrice,maxPrice) {
  
 retur rooms
       .filter(
       .map(room -> type of room, price of room
}

functioncall (hotelRooms, 5000, 15000)
console.log(functioncall (hotelRooms, 5000, 15000));

---------------------------------------------------------------

ShoopingCart

-> generateReceipt(cart) {
      
// calclualte total ->
// item.
      

}

const cartItems = [

      {name:"Laptop", price :55000, quantity : 1},

]

------------------------------------------------------------------

generateReportCard for student

(total marks -> 
(average marks ->
(oercentage ->



//object
const studentData = {

      name : "Tanuj",
      marks : { Maths : 95, Science : 97 , Computers : 98}
};

------------------------------------------------------------------

DOM, Events, query methods, event listeners

DOM -> Document Object Model
    -> is an API 
    -> allows JS to interact with and manipulate HTML elements dynamically
    
    ->  DOM represent an HTML doc as a tree structure an every element as a node

    Document
     | ---- html
              | ----- Head
              | ----- Body
                        |--------- h1

DOM -> 

Select elements in DOM (Query Method)

-> FindElementByid

const heading = document.getElementById('heading');
console.log(heading.textContent); // Welcome to JS

-> GetElement bY class

const messages = document.getElementByClassName("message")

-> get element by tag name -> <h1, <p, <button

const h1headings = document.getElementByTagName("h1");

QuerySelectors()

-> finds the first matching element

const heading = document.querySelector("#heding"); //select by id
                                      (".message"); //selectby class


Modifying DOM Elements

change text, style, attributes 

const heading = document.querySelector("#heding");
heading.textContent = "--new content---";

const headingP= document.querySelector(".message");

heading.innerHTML = "<strong> conent </strong>

button -> disable, enable

const button = document.querySelector("#btn");
button.setAttribue("disabled", "true"); //disable the button


--------------------------------------------

Eevents Handling

-> clicks, keypresses, mouse movements

const button = document.querySelector("#btn");
button.addEventListener("click", function() {
           alert("Button Clicked");
});

// mouseover -> background color of button
// keyPressed

----------------------------------------------------------

Asynchronous Programming ->

Synchronous / Asynchronous

-> each operation executes one after another


Asynchronous

-> fetch data from API
-> Query a db
-> Reading  a file from s=disk
-> Timers -> setTimeout, 

-> which do not block the rest of the program 

consle.log("start statement")
settimeout(3sec)
console.log("end statement")

Why we need ->

app -> reposnsive -> time consuming 
prevent freezing

efficient resource ulitization I/O

Faster execution

web dev -> rely po API calls, user interactions, db ops

JS Asynchronous execution :
 
1. Callback - older way->
   -> ia a function that is passed as an arg to another function and is t
   -> callback hell
      -> dependent on each other -> nested callaback 
    
2. Promises -> 

      ia an object that represents eventual completeion or failure of an Asynchronous
operation

three states 

1. pending state - operation is in progress
2. fulfilled - operation is completed successfully
3. Rejected - operation failed

fetchData -> return a new promise -> resolved or rejected
          if success -> resolve
           else 
                 reject

3. Async/Await

   -> make a function async -> return a promise
   -> await -> pauses execution until the promise reoslves

   aysnc function fetchData() {
       
   -> error handling with try catch

---------------------------------------------------------

fetchData 

-> display all list of books in html page

-> books.html

-> getAllBooks() -> return this as response in web browser
                         
http://localhost:8080/books

bookid  booktitle price authorid

---------------------------------------------------------


Modules -> 

TypeScript

--------------------------------------------------------
























































































Callback :

-> function that is passed as an argument to another fucntions

-> is executed after the completion of an asyanchronous operation

-> how

-> func - async op
-> instead of waiting -> register a callback func
-> once async op -> callback is executed automatically

function fetchData(callback) {
		
		console.log("Fetchind data............");
		
		setTimeout( ()  =>   {
			
			    let data = { name: "Tanuj", age:25 };
				callback(data);
				
		}, 3000);
		
		
	}
	
	function processData (data) {
		console.log("Procesing Data.....",data);
	}
	
	fetchData(processData);
	
-> callback hell
-----------------------------------------------------------------------------


Promise :

-> object that rerresent the eventual completion or failure os async operation

-> chaining of multiple async operations

-> promise -> resolve , reject

fetchData -> resolve , reject
         
           -> success -> true


.then() -> success
.catch() -> 


function fetchData() {
		
		return new Promise((resolve, reject) => {
			
			console.log("Fetchind data............");
			
			setTimeout( ()  =>   {
				
				            let success = true;
							
							if (success) {
								
								resolve({ name: "Tanuj", age:25 }); //fulfilled
							}
							
							else {
								reject("Error : Failed to fetch data"); // Rejected
							}
												    							
					}, 3000);
			
		});	
	}
	
	//using the promise
		
	fetchData()
	  .then ((data) => {
		console.log("Procesing Data.....",data);
	  })
	  .catch ((error) => {
		console.log(error);

	  }

----------------------------------------------------------------------------

Chain in promise 

.then()
.then() calls

-> first .then proceses
   -> return data -> second .then() receive the updatedData

-> promise execute them sequentially
fetchData()
	  .then ((data) => {
		console.log("Procesing Data.....",data);
		return {...data, city:"ND"};
	  })
	  .then((updatedData) => {
		console.log("Procesing updated Data.....",updatedData);
	  })
	  .catch ((error) => {
		console.log(error);

	  }

--------------------------------------------------------------------------

async / await -> Simplest Approach

-> async -> makes a function return a promise

-> await -> pause the execution until the promise resolves

-> try catch blocks

-> implement this things in getData()

------------------------------------------------------

Fetch API

-> API -> built in JS
-> allows making HTTP request 
   
   -> GET
   -> POST
   -> PUT
   -> DELETE

-> reqs to web servers

-> when you call fetch(url) 
-> it return a promise -> resolve to a response object
-> response -> JSON format


-> HTTP -> 
->      -> 

-> status codes -> 

-> 200 -> response ok

-> 404 -> page not found
-> 500 -> server error


promise ->

function fetchUserData() {
		
		// make the GET request
		fetch("https://url.de.m.mimecastprotect.com/s/GgDMC08wN7i4YyKvnHoHoT9_uxv?domain=jsonplaceholder.typicode.com")
		  .then((response) => {
			
			if(!response.ok) {
				throw new Error(`ttp error : status : ${response.status}`);
			}
			return response.json();
			
		  	))
		
		.then ((data) => {
			console.log("Users Data : ", data);
		})
		
		.catch((error) => {
			console.log("Error : ",error);
		});		
	}
	
	fetchUserData();

async wait ->

fetchUserData2();



---------------------------------------------------------------

Fetching Datawith Paramters:

fetchUserData(5) -> function call -> parameter 5

             (3) 


add(3,4)

add(a,b)

fetchMultipleUsers([2,6,9]) -> function call

fetchMultipleUsers(userIds){


// P

// userid ->

// making multiple request 

// let userPromises = userIds.map((id) => fetch call)

// lets users = await Promise.all(userPromises)
// log -> 

// success -> all 
// [2,6,15] -> 

---------------------------------------------------------------------

Post -> 

// createUser(newUser) {


// API -> creating new user -> save new data into backend server

// fetch("url") + options

// fetch("url/users", {
      
       method: "POST",
       headers: {
            "ContenT-Type":"application/json",
       },  // -> to tell the server , req, post, request body contains json data
       body : JSON.stringify(newUser)  // object into JSON string to send it to server

});

if -> console.log(user)



}

let user = {name:"Tanuj",email:"yg@gjg"}  //object

-> 
get req ->


online book -> 10 books

11 books


------------------------------------------------------------

Delete Request

-> delete a user -> fake API

-> method : Delete

-> based on certain id ->

-> console.log -> user with id : {} deleted.

-> confirmation from user/client -> 

  -> are you sure you want to delete
  
let confirmation -> window.confirm("
                    -> ask the user
             
if(!confirmation) {

   print -> deletion canceled. return
}


try 

----------------------------------------------------------------------

PUT -> update the user

-> method : "PUT"

-> Case 1: 
updateUser(id, object) -> window.confirm -> PUT

-> Case 2:

updateUserSpecific(id, object) -> window.confirm -> PATCH


-> two things

-> based on certain id -> 

case 1 :
-> let userUpdate = {name:" " , email : " ", city : "  ", address : " " } -> all fields -> PUT

Case 2 :
-> let userUpdateSpecific = {name: " ", city : " " } -> PATCH


updateUser(id, object)

---------------------------------------------------------------------------------------

Modules IN ES6

-> JS permitted 
-> Encapsulation -> keep related code
-> Maintainablity Readibility -> 
-> Reusability 

-> math.js -> add()
              sub()
              

-> xyz.js -> 


-> math.js, xyz.js -> serve as modules

-> main.js -> 

-> ES6 ->

Named and Default Exports

-> Named Export -> Export multiple values
   -> Must use {} when importing
   -> Variables must have same name when imported
    
-> Default Export -> Export a single value 
   -> Each file can have only one default exposrt
   -> {} not needed
   ->  names can be different when importing

-----------------------------------------------

index.html file :

<script type="module" src="app.js" ></script>


math.js :

/ Named Export

export const add = (a,b) => a+b;
export const sub = (a,b) => a-b;
export const PI = 3.142;

//default export

export default function greetMath(name) {
	return `Hello, ${name}`;
}

utility.js


// default export
export default function greet(name) {
	return `Hello, ${name}`;
}

----------------------------------------------------------

Spring Boot 
Model View Controller

-> Controller Layer 
-> View Layer

-> handle user interactions and presentation

-> Controller Layer 

-> responsible for handling web requests
-> handle HTTP requests 
-> processes user inputs 
-> interact with service layer and return responses

-> create a class 

-> Annotations

-> @Controller :  marks this class as a spring MVC controller
               : class will handle all HTTP request
-> @RequestMapping : used to map URLs to controller methods
                   : at class level
                   : ('/api')
                   : http://localhost:8080/api
                   : Supports all GET  PUT< DELTE POST

@equestMapping('/api')
-> BookController -> class
{

      @GetMapping('/books')
   -> fetchAllBooks -> http://localhost:8080/api/books

   -> fetchbookbyid -> http://localhost:8080/api/books/id

   -> searchBookbyName ->  http://localhost:8080/api/books/search?name="ABC"
               
-> AuthorController 
   -> fetchAllAuthors -> http://localhost:8080/api/authors

->   @GetMapping -> requestmapping -> methog with method get
     -> shorthand 

-> @PostMapping
-> @PutMapping
-> @DeleteMapping

-> parameters :

-> @PathVariable
   -> used to extract path parameters from URL
-> @RequestParam
   -> 

-> @RequestBody -> convert jSON request body into a java object

-> @ResponseBody -> convert the return value of a method into

-----------------------------------------------------------------

-> View Layer
   -> json reposnse
-> return view pages -> HTML Pages

-> books.html
  -> Table 
  -> html + JS

---------------------------------------------------------------

BOOKS AVAILBLE

Title     Price   AuthorId

BookController :

@Controller
@RequestMapping("/api")
public class BookController {
	
	// inject the service layer object
	private BookService bookService;
	
	@GetMapping("/books")
	@ResponseBody
	public List<Book> fetchBooks() {
		return bookService.getAllBooks();
	}
	
	// return books.html page
	
	@GetMapping("/books")
	public String showBooks() {		
		return "redirect:/books.html"; //load books.html -> static folder		
	}

}

Books.html :

<!DOCTYPE html>
<html lang="en">
<head>
    <title>JavaScript</title>
</head>
<body>
	<h1> Books Available </h1>
	<ul id="bookslist">
		
		<script> 
			
			// fetch books dynamically
			
			fetch('/api/books')
			
			// get response

----------------------------------------------------------------------------------

Assignment : Display all books list

           : Search Book |__________| 
                 Submit -> Button
              Display based on that id

-------------------------------------------------------------------































































































































-> Functionalities
   -> Database Schema

-> Best Practices
-> Architecture
-> Login in Facility 
-> Admin panel / User Panel

-----------------------------------

React 

-> 
-> 

React with Spring Integration

--------------------------------------------

React

-> open source JS library
-> used for building interfaces UI
-> useful for single page applications SPAs
-> content updates dynamically
-> page 
-> some changes in code
-> in react -> without reloading the page -> content still updates
-> developed and maintained by Meta
-> build fast , scalable, reusable and render changes based on data changes

Why React >

-> Efficient UI Updates
   -> with Virtual DOM -> 
   -> Traditional -> manipulate real DOM directly, 
   -> React -> virtual DOM -> in mem representation of real DOM
   -> changes -> virtual DOM, manipulate only the changed parts in real DOM 

-> Component Based Architeture
   -> apps using components, reusable parts of UI
   -> form, navbar, entire page
   
-> State Mangement 
   -> built in state mgmt. -> hooks use State

-> Rich Ecosystem & Community SUppot
  -> React Router 
  -> Axios API calls
  -> Strong 

-> Perfomance Optimization
  -> lazy loading, concurrent rendering 
  
-> Cross Platform Developmentc
  -> Web apps, mobile apps, server side capabailities

-> Use Cases : fb, insta, 
             : ecommerce
             : video streaming services
             : Dashboards -> 

---------------------------------------------------------

npm create-react-app web-app

Command Prompt


npm install -g create-react-app

create-react-app web-app

cd web-app

code . -> open in vs code

node.js -> React apps -> requires a JS run time environment - execute JS 
        -> provide the environemnet  -> modern JS features
        -> npm -> node package manager -> helps in managind react dependencies
        -> npx -> node package executor -> run the larest version of react app 


----------------------------------------------

Intro - JSX - JavaScript XML in react
 
-> syntax extension for JS ->
-> write HTML like code inside JS files
-> enhancing - read, maintain, develop

-> JSX Must have a single parent element

function App() {

return (

     <h1>   </h1>
<p> </p>
);
}

Embed Expressions -> {}

Add attributes in JSX

<h1 class="title"> -> HTML
<button onclick="">

JSX how we can write same attributes -> camelCase -> 
class -> className 
onlcik -> onClick

CoditionalRendering

Inline CSS

----------------------------------------------

Traditional Apps -> HTML<CSS< JS  -> 
-> user interact with website -> click a button
-> browser send a req to the server
-> server process the req , generate new HTML file, sends it to client
-> needs full page reload -> slow / i eeficient

React
-> Virtual DOM
   -> UI change -> update VDOM 
   -> compare new previous
   -> changed eles -> updated real DOM

-> Reconciliation Process
   -> new VDOM old one
   -> diffs -> 
   -> list -> 1000 items
           -> updated one item
   -> Traditional -> re render the whole list
   -> React -> only that singl ele -> save resources, improve performance

-> HMR -> Hot Module Replacement - feature of webpack
  -> save -> Webpack detects the change
  -> replace only the changed
  -> UI updates 

--------------------------------------------------------


Components 

-> reusable, self contained piece of UI that renders part of a web page
-> building block of a react app
-> ecommerce app
   -> NavBar Component -> logo, serach bar, cart icon, 
   -> Product Cart Components -> detail,
   -> Customer Review Component
-> independent of each other and they can used across multiple pages

Types :

1. Functional -> modern React - like JS functions
2. Class -> Older - legacy applications

Functional Components :

-> is a JS function that return JSX -> React syntax for UI
-> simple, 
-> plain JS functions
-> easier to code and test
-> Uses React Hooks -> useState

Props -> properties 
-> allows data to be passed from one component to another
-> dynamic 

FC -> functional componets
-------------------------------------------------------

Class Components

-> JS ES6 class -> extends React.Component 
                -> must include a render() method, which returns JSX
-> can manage their own state -> this.state 
   FC -> after hooks
-> Lefcycle Methods -> componentDidMount()
                       componentDidUpdate()
                       componentWillUmount()
-> render() -> mandatory 
-> props -> this.props
-> more code is needed

-> Class Comp with State

-------------------------------------------------------------

React Fragments :

-> return -> single parent element
-> allows us to return multiple elements without a <div> 
--------------------------------------------------

Conditional Rendering :

-> render something only when cond is true
-> Notification -> unreadMesgs
  -> && operator (Short Ciruit Evaluation)

|| Operator (Default Fallback) -> to provide default value

-> Welcome -> name || Guest
App.js -> Welcome name = "" , null, undefines, 0 

--------------------------------------------------------------

Handling Forms :

-> used for user input, login registeration, feedback
-> In react, forms are controlled components 
  -> input, textarea, select
  -> controlled via React state.

-> Forms -> maintain
         -> initial state

-> useState -> add state to the functional component
            -> any type of value
            -> initial state -> accepted as input params
            -> returns a values reflect the current state
            -> destructure
  Email : 
  Password : 
  user has submitted

---------------------------

Instead of managing separate state variables, we can use a single state object

function -> 

{

const[formData, setFormData] =useState( {
   name: '',
   email: '',
  password: ''
});

const handleChange = 
  const (name,value} =event.target;
  setFormData({
  ...formData,
  [name] : values
});

submit -> conole.log('Form Data:', formData)

value={email} -> {formData.email}

handle checkboxes , radio buttons
































































































Requirements
Functionalities
Validations
Architecture - Java MVC, Backend - Integrity Constraints
Testing
Team Work 70%

-> hackerRank -> Core java, MySQL, Unix

---------------------------------------------------
List and Keys

-> display multiple elements dynamically
-> render lists -> .map()

const names  = ['n1', ....]

return (
<h1> Names List </h1>
  <ul>
     {names.map((name, index) => (
         <li key={index}>{name><li> 
     ))}
   </ul>

keys -> changes,
     -> optimization
     -> not using keys -> re-render the entire list 
     -> keys unique

const employees = [
              {id :1, name:'xyz'},
{id :2, name:'xyz'},
{id :3, name:'xyz'}
          ]

employees.map((employee => (
           <li key={employee.id} > {employee.name} </li>

Main Page :

   Names List
   List of Names
   
   Employees List
   Names

   Active Employees
   Names

-> Conditional Rendering of the list

  -> const employees = [
              {id :1, name:'xyz', active : true},
{id :2, name:'xyz', active : false},
{id :3, name:'xyz', active : true}
          ]

-> Active Employees

employees
         .filter((employee) => employee.active)
         .map((employee => (
           <li key={employee.id} > {employee.name} </li>


---------------------------------------------------------

React hooks :

-> useState() 
    

  -> Functional COmponents
 -> Before Hooks -> state mgmt. lifecycle methods
-> this.binding

-> After Hooks -> functional Componenets 
  

Hooks -> allow FC -> to handle state, side effects - useEffect, other features, 
                         useState                        |
                                        API calls, timers, fetch data

      useReducer-> mamange complex logic

useEffect -> perform side effects in Fcs
          -> Fetching API data
             Maipulating DOM
             Running Timervals - setInterval
                 
Syntax -> useEffect( () => { 
                   // side effect logic}

useEffect with dependencies

function Message( {text}) {
    useEffect( () => {
           console.log('Message Updates : ${text}');
    }, [text]); // Run only when'text' changes

    return (
       <h2> {text}</h2>
  }

--------------------------------

useReducer()

-> is an alternative to useState 
-> complex state logic
-> state transitions are across multiple actions
-> next state depends on previous state
-> Multiple state values need to be updated together

Synatx -> const[state, disptch] = useReducer(reducerFunction, initialState);

-> action -> incrementing counter
          -> decrement
          -> reset

function reducer(state, action) {

    switch(action.type) {

      case "increment"
           return {count : state.count+1};
      case "decrement"
           return {count : state.count-1}; 
      case "reset"
           return {count : 0};
      default :
           return state;
   }
}

     
function Counter() {

const[state, dispatch] = useReducer(reducer, {count :0});

return (
     <>
        <h2> Count : {state.count}</h2>
        <button onClick={() => dispatch({type : "increment"})}>Increment</button>
        <button onClick={() => dispatch({type : "decrement"})}>Decrement</button>
        <button onClick={() => dispatch({type : "reser"})}>Reset</button>

     </>
    );
}

---------------------------------------------------------------
 
Shopping cart

const initialState = [];

-> Add items
-> remove items
-> Clear cart

function cartReducer(state, action)
 -> add, remove, clear
     |    |        | []
         return 
         filter
   ...   based on index
   item 

-> 

const initialState = [];

function cartReducer(state, action) {

switch(action.type) {

      case "add" :
           return [...state, action.item]; // addd item to cart
      case "remove" :
           return state.filter((item,index) => index!=action.index);
      case "clear" :
           return [];
      default :
           return state;
   }
}

function ShoppingCart() {

const[state, dispatch] = useReducer(cartReducer, initialState);

return (
<>
<h2> Shopping cart ({cart.length} items) </h2>
<button onClick={() => dispatch({type : "add", item : "Laptop" })}>Add Laptop</button>
<button onClick={() => dispatch({type : "add", item : "Mobile" })}>Add Mobile</button>
<button onClick={() => dispatch({type : "clear"})}>Clear Cart</button>
<ul>
{cart.map((item,index) => (
   <li key={index}> {item} <button onClick={() => dispatch({type : "remove",index })}>Remove</button></li>
</ul>
</>

Add Laptop, Add Mobile, Clear, Remove

--------------------------------------------------------------------

React Router
-> library enables navigation b/w diff views or pages in SPA
-> Instead os fetching an entire new page from servers, 
-> based on URL, it updates the content dynamicallr
-> browser -> navigating to new page, 
          -> React updated only the necessary parts 
          -> app state in intact

npm install react-router-dom -> 

components -> pages -> FC

3 three components -> Home.js, About.js, Contact.js
                          
-> Home.js -> Welcome from Home Page

Setup Routes in App.js

Raect, All these .js
import {BrowserRouter as Router, Route, Routes, Link} from "react-router-dom";
        enables routing                         replace <a> to prevent page reloada
     
                                       Wrap all components
                                 define path to component mapping


return (

<Router>
<nav>
<ul> <li><Link to="/"> Home </Link></li>
     <li><Link to="/about"> Home </Link></li>
     <li><Link to="/contact"> Home </Link></li>
<nav></ul>
<Routes>
<Route path="/" element={<Home/>} />
<Route path="/about" element={<About/>} />

</Routes>
</Router>

------------------------------------------------------------------

User.js

-> Dynamic Routes

/user/tanuj -> Welcome Tanuj
/user/sonali -> Welcome Sonali

imort {useParams} from "react
useParams -> Extract username from the URL

User.js -> 

function user() {
    
    let {username} = useParams();
    return (
        <h2> Welcome, {username} </h2>
)}


App.js

-> Routes <Route> path="/user/:username" 
-> Nav Bar -> Links ->
   <li><link to = "/user/tanuj"> User Tanuj
   <li><link to = "/user/sonali"> User Sonali

-------------------------------------------------------------------------

Nested routes in React Router

-> allow components to render child components inside parent routes

/Dashboard with nested routes -> Home Page
/dashboard/profile -> 
/dashboard/settings -> 

Dahsboard.js

import {Link, Outlet} from "react-render-dom";
function Dashboard() {
return(
 

heading - Dashbaord
<nav>
<Link to="profile">Profile</Link> | <Link to="settings">Profile</Link>
</nav>

Profile.js
Settings.js


App.js ->

nav bar -> Dashboard

<Routes>
<Route path="/dashboard" element={Dashboard/>}>
      <Route path="profile" element={<Profile />} />
      <Route path="settings" element={Settings />} />
</Route>

------------------------------------------------------------------------

Http requests in React : fetch, aysnc/await, axios

-> fetch API
-> axios - popular third oarty lib

-> HTTp CLient -> relies on JS

fetch aysnv await

API -> test API

-> fetch() -> make an API call -> jsonplaceholder/users
-> await response.json() -> convert the response into json
-> useEffect() -> when component loads -> fetch the data
-> try catch blocks

import React, {useEffect, useState} from "react";

function UserList() {

   const[users, setUsers] = useState([]);

   useEffect( () => {
      
       const fetchUsers = async () => {

       try {

        const response = await fetch("https://url.de.m.mimecastprotect.com/s/8X_PCw0ozwSPX2J9XfRHlUJgoml?domain=jsonplaceholder.typicode.com");
        if (!response.ok) {
            throw new Error("Failed to fetch users");
        }
        const data = await response.json();
        setUsers(data);
        }
        catch(error) {
        console.error("Error fetching users: ", error);
        }
     };

     fetchUsers();
), []);

return (

<>
<h2> Users List </h2>
<ul> 
  {users.map( (user) => (
   <li key={user.id}>{user.name} ({user.email}) </li>
  ))}
</ul>

</>
);

}

--------------------------------------------------------------

axio library

-> used to make HTTp request using React
-> automatically parse JSON no need to use response.json()
-> better error handling
-> better support cancellation

GET POST PUT DELETE

-> npm install axios

import React, {useEffect, useState} from "react";
import axios from "axios";

function PostList() {

   const[posts, setPost] = useState([]);

   useEffect( () => {
      
       const fetchPosts = async () => {

       try {

        const response = await axios.get("https://url.de.m.mimecastprotect.com/s/gz4zCx6pAxSBKznwKc7IlUyV9GS?domain=jsonplaceholder.typicode.com");
           
        setPosts(response.data);
        }
        catch(error) {
        console.error("Error fetching users: ", error);
        }
     };

     fetchUsers();
), []);

return (

<>
<h2> Post List </h2>
<ul> 
  {posts.slice(0,10).map( (post) => (
   <li key={post.id}>{post.title} ({post.body}) </li>
  ))}
</ul>

</>
);

}

---------------------------------------------------------------------------

POst Request using Axios

function CreatePost() {

   const[title, setTitle] = useState("");
   const[body, setBody] = useState("");

      
      const handleSubmit = async (event) => {

      event.preventDefault();

       try {

        const response = await axios.post("https://url.de.m.mimecastprotect.com/s/gz4zCx6pAxSBKznwKc7IlUyV9GS?domain=jsonplaceholder.typicode.com", {
           title,
           body, 
           userId:1
}
);
     console.log("Post Created.");      
      
        }
        catch(error) {
        console.error("Error fetching users: ", error);
        }
     };

  
return (

<>
<h2> Create Post </h2>
<form onSubmit={handleSubmit}>
<label> Title </label>
<input type="text" value={title} onChange{ (e) =>setTitle(e.target.value)} />
<body>
<Button type="submit"> Submit</buuon>

</>
);

---------------------------------------------------------------------------------------------------------

}

Friday Based - MCQ




















































          





 
Error Boundaries - Class Components
Redux - State management, Toolkit
React testing with Jest

onlinebookshop -> testes APIs
-> move that app -> create Rest APIs 
-> 

-> Rest APIs -> 
-> testing those apis -> in react

---------------------------------------------------

Delete and PUT 
-> 

------------------------------


Redux

-> State management library in react
-> manage and centralize the application state

-> React components -> state -> can be local (component level)
                             -> can be global (shared across aplictaion)

-> simple, small, -> component level
-> multiple components -> large app
-> manage shared states across multiple components
-> become complex

-> Redux -> provides us with a centralized store
         -> manageable
   Key Points :

   -> Single Source of Truth -> app state is stored in a single object -> redux store
   -> Predictability -> State updates follow a strict pattern 
   -> Seperation of Concerns -> separating logic for handling state from UI components
   -> Easier debugging
   -> Scalabilty -> 
- 
   -> State is Read-Only 
      -> only way to change state is by dispatching an action 
      -> Direct modification not possible
      -> Changes are made using by pure reducer functions
          -> take previous state, action and return  a new state

 -> Redux Workflow
    -> follows a unidirectional workflow
      -> state updates are clear and maintainable
    Steps :
    1. Redux Store - global state
    2. Action -> 
    3. Reducer -> reducer functions
    4. UPdated State -> React components re rendered based on updated state


Set up redux in React App

-> redux (core Redux library)
-> react-redux (bindings for using Redux and React)

Install -> npm install redux react-redux

Key Redux Componnents

-> Store -> redux librabry -> createStore
-> reducer function
-> Actions -> type, creator
-> connect redux to react -> index.js
   -> wrap this app inside the Provider -> import from react-redux
   -> pass the store
-> access the state in a component
   -> react-redux -> useSelector()
-> updating state -> dispatch an action
  -> react-redux -> useDispatch()

Counter -> inc dec

Project Structure :

components -> Counter.js
           -> CounterButton.js
           -> CounterDisplay.js
redux -> action.js
      -> reducer.js
      -> store.js
App.js
index.js

-> install the dependencies : npm install redux react-redux

-> Create Redux Files
   redux -> action.js (action creators) 
                      -> define what can happen 
                      -> plain Js objects -> describe certain event
      -> reducer.js
                   -> initial state, return updated state
      -> store.js
                   -> createStore

-> Connect redux  to react
   -> wrap the App component with the Provider component
   -> index.js

-> Creating UI Components using Redux
    -> 


----------------------------------------------------


Modern Approach -> Redux Toolkit - RTK


-> write redux apps
-> simplied API -> reducers boilerplate , better improved perf
-> streamlined way

-> separate file -> actions, reducers, constants
-

Features 

-> configureStore() -> simplifies store setup 
   -> automatically -> set up  the single reducer
   -> dev tools

-> createSlice() -> define all at once -> 
                 -> combined actions and reducers

-> handling async operations -> API Calls 
        -> w/o RTK -> manual setup redux-thunk
        -> with RTK -> createAsyncThunk()

-> Immer.js -> Allows mutable like state updates state.count+=1
            -> w/o RTK -> manually
               

Changes Needed :

npm install @reduxjs/toolkit 

Project Structure :

components -> Counter.js
           -> CounterButton.js
           -> CounterDisplay.js
redux -> counterSlice.js
      -> store.js
App.js
index.js

-----------------------------------

React Testing with Jest

-> Jest -> JS testing framework
   developed fb
-> used for testing React apps

-> Fast and Realiable Test -> run tests in parallel, 
-> Built in Mocking -> Allows testing components in isolation
                    -> simulate PAI calls, functions
-> Snapshot Testing : captures comp o/p and detects unintended changes
-> Code coverage reports -> measures how much of code is tested
                         -> identify missing test cases

automated testing -> checking comp rendering, events, functionality

Types 

1. Unit Testing -> testing components in isolation
2. Snapshot testing -> Capture UI -> ensures 
3. Integrating -> multiple comps -> work together well
4. End to End -E2E -> simulates user interactions

----------------------------------------------------------------------


Counter -> inc dec reset

-> test cases
 -> component rendering
 -> verify initial state
 -> button -> inc dec reset, all event hanlders
 -> ensure state correctly

test("renders Counter component", () => {
    render(<Counter />);
    const counterText = screen.


npm test

-------------------------------------------------------------------

Rest APIs

-> Representation State Transfer REST
-> API that follows rest principles -> REST API
-> interaction b/w client and server using all HTTP methods

Why should we use REST APIs

-> REST APIs can be easily consumed by frontend technologies - React, Angular, Mobile Apps, third party services
-> @Controller -> mostly for web apps with HTML views, JSP
-> use a more cleaner structure -> architecture 
-> Traditional APIs -> might return entire HTML page -> slower the speed
   -> send JSON data, faster 
-> Stateless Communication -> do not store client session data
   -> Traditional -> session state
   -> Scalability factor -> more scalable
-> Rest APIs -> Universal APIS, web browsers, Mobile, IOT
   Traditional APis -> only for web browsers

@Controller

-> @RestController

-> web app -> HTML Pages -> @Controller
-> API to frontends React -> use @RestController

Changes ->

@RestController

Return instead of HTML -> JSON responses
ResponseEntity -> proper HTTP response
standard REST endpoints

-------------------------------------------------------------------











































    























                       


   
-> Web Services
-> Conceptual ->
   -> SOAP -> 
   -> REST
-> Assessment -> MCQs

-> Testing Phase -> test cases, validation

-----------------------------------------------------------------------

-> Web Services

  -> standardized way of communicating b/w diff apps or systems over a network
  -> apps can interact with each other, regardless of platform, PL, locations
  -> app -> Java, another -> Python
    using web services -> let apps communicate

  -> Features :
  -> Platform independent -> works across all independent
  -> Language independent -> Java service can comm with Python client
  -> use Standardized protocols -> HTTP, REST, JSON, XML, SOAP
  
  -> Example : Online payment System
  -> Amazon -> checkout
  -> multiple option -> PayPal, Google Pay, Credit/Debit
     -> Amazon does not store or process your card details, UPI
     -> calls Payment Gateway Web Service -> transaction has to be done securely
  -> PayPal method
  -> E-comm amazon -> sends the user details -> amount, email -> PayPal web service
  -> PayPal -> process the payment and return a response -> success/failure
  -> Based on response, Amazon order -> confirmed or cancelled

  -> Amazon, PayPal -> two diff apps
 
   Uses/Need :
  -> Apps talk with each other -> Interoperability
  -> Reusability -> 
  -> Loose Coupling -> services operate independently, can be updated separately
  -> Scalability -> large number of requests from diff client

  -> works on request-response model

  Components of Web Service

  -> Service Provider -> SYstem that hosts the web service -> PayPAl, Google Maps API
  -> Service Consumer -> app that call the web service -> Amazon, Ola/uber
  -> Service Registry -> directory where web services are listed


Types  :

-> SOAP Web Services -> Simple Object Access Protocol
-> Rest Web Services -> 

serve the same purpose -> enabling comm -> 
diff -> in implementation, protocols, use cases

SOAP Web Services 

-> protocol for exchanging structures info in web services
-> uses XML for data format and relies on strict rules for coomm
-> SOAP messages -> transmitted over HTTP, SMTP, TCP 

Components

-> SOAP Message -> XML Based request/ response format
-> WSDL -> Web Services Description Language -> Describes the soap service 
-> UDDI -> Universal Description, Discovery and Integration -> acts a registry for SOAP services

-> Banking APp -> 
   -> SOAP based web services :  -> Fund transfers
                                 -> Loan Processing
                                 -> Account statements
   -> high security, strict validation, transaction reliabilty


SOAP vs REST

-> Strict protocol, Architectural style
-> XML , JSON, XML, Plain Text
-> speed -> slower(XML), faster
-> security -> Highly secured -> WS-security, HTTPS, OAUth
-> Complexity -> Complex, WSDL, REST - easy
-> Use Cases -> Banking, Google Maps API, social media


SB Boot -> create a web service -> test it in running
        -> test that in soap UI

JAXB -> Java Architecture for XM Binding -
    - > library -> provides a way to convert Java objects to XML, vice versa

SOAP project -> communicate using XML messages, JAXB is needee
             -> Convert Java objects to XML -> Marshalling -> needed when sending soap response
             -> XML to java objects -> unmarshalling -> SOAP request

             -> XSD Schema -> contract - first SOAP web serviee
             -> help generate classes from an XSD schema

JAXB -> JAXAPI -> defines the interfaces for JAXB ops
     -> JAXB Runtime -> implement API

XSD -> XML Schema Definition
    -> define the structure of an XML document
    -> specifies elements, attributes and data types -> valid XMML
    -> soap web service, used to define request and response format

Students Data

model ->

service -> 

request ->

response -> 

endpoint -> mark endpoint -> class as a SOAP web service
           PayloadRoot -> define the SOAP req format 
           Process the getstureq -> getsturesponse

configuration -> enable web service

http://localhost:8080/ws/students.wsdl

Assessment -> 

----------------------------------------------------------------

Typescrips -> strongly typed, object oriented, complied -> Microsoft
           -> superset of JS
           -> any valid JS code -> also valid TS code
           -> adds static typing, interfaces, classes and other tools support to JS

strongly typed :

var = "Hello" 
-> vay is of string type

var =10 -> cannot change

let age : number =  25;
age = "25"; //Error

static typing : helps catch errors at compile time rather than at runtime

npm install -g typescript

-> npm list -g typescript
-> npm root -g

-> npx tsc -v

tsc -v -> to check version

tsc first.ts -> compile ts file into js

             -> first.js

Run Js file -> node first.js -> Hello World

function greet(name:string) : string {
    return `Hello ${name}!`;
}

console.log(greet('World'));

==================================================================









































































Typescript

-> static typing -> number, string, Boolean

-> function -> validate users age -> based on that register user

// use case -> 
// enum OrderStatus { -> Pending, Shipped, Deliverd, Cancelled }

// function -> checkOrderStatus -> accept order status and return string message 
// variable -> status -> OrderStatus -> switch (status) 
// case OrderStatus.Pending :
// return "Your order is pending";, default -> return "Invalid status"

// console.log(call function with different status)

-----------------------------------------------------------

Generics in Typescript

-> allow us to write flexible, reusable components -> work with multiple data types
<T> -> generic type

function genFunction<T>(value : T) : T {

     return value;
}

console.log(genFunction<number>(10));
console.log(genFunction<string>("Generics"));


Generic Interface :

interface genInt<T> {
      content : T;
}

// create objects
const strGenInt : genInt<string> = {content : "Typescript"}
const numGenInt : genInt<number> = {content : 100.90}

Generic Classes 

class dataStorage<T> {
     
      private items: T[] = [];
     
      addItem(item : T) : void {
         this.items.push(item);
      }

      removeItem(item : T) : void {
            this.items = this.items.filter(i => i!=item);
      }
     
      getItems() : T[] {
           return [...this.items];
      }
  }
-------------------------------------------------------------------------

Modules 

-> export import 

-> TS file -> 

Math Utility -> mathUtils.ts (export)

export function add(a:number, b:number):number{
return a+b
}

app.ts ->

import { add, subtract } from "./mathUtils";


export -> named -> allows exporting multiple items from a file
          default -> export a single file


----------------------------------------------------

Implement a Library Mgmt System : 


Step 1: 
Book.ts module  -> Define an interface Book -> id, ttile, author, isAvaialble
                -> export this interface
                -> export interface Book { }

Step 2: 
Library.ts -> import book
           -> class Library
              -> array books : Book[]
              -> addBook 
              -> issueBook(bookId: number) -> Mark book as unavaible , id ->
              -> returnBook -> bookId -> made available
              -> listAbboks
            -> export class
            -> export class Library {
                

App.ts -> Import Book,
          -> initialize library instance
          -> const libTech = new linrary(); 
          Library
          -> Add 4 books
          -> issuing 2 books
          -> Print all available books

---------------------------------------------------------------------------

Online Shop

-> Dmart -> Application -> Handling Inventory, Managing Orders, Handling Customer Data

-> Monolithic -> entire app is built as one application -> production environment -> deployed

-> Microservices architecture, 

                 -> all the services are handled independently -> creating a microservice to deploying
                      -> inventory -> java react mysql
                      -> orders -> python Django mongodb

-> let them communication 
-> Eureka server

-------------------------------------------------------------------------------














































All possible functionalities,
enhancements -> additional
architecture diagram - high level 

--------------------------------------------------------------

Monolithic Architecture :

-> designing apps -> all components are -> single unified unit
-> UI, business logic, db mgmt. -> deploy as a single entity

-> Single Codebase -> entire application exists as one large codebase
-> Tightly Coupled components -> are interconnected -> dependent on each other
-> Single Deployment Unit 
-> Shared Database -> 

Challenges 

-> Scalability issues : book controller -> scale it one module -> 
-> Difficult to maintain and update -> 
-> Technology limitations -> new technology -> 

-----------------------------------------------------------------

Microservices Architecture 

-> modern s/w dev approach
-> application is broken down into smaller and independent services
-> services can communicate with each other over a network
-> service -> responsible for some specific business operation and operate independently

Characteristics
-> independent services  - self contained unit -> own technology -> language , db
-> loosely coupled -> communicate -> REST
-> independent deployment
-> technology separate 
-> Fault isolation -> fault in one service -> other service will still worl

-> Scalability -> each service can be scaled independently
-> Faster development and deployed 
-> tech flexibility
-> better maintainability

------------------------------------------------------------------------------

All Steps required to built microservice

-> microservices first -> online book shop -> book, author, order -> 8081, 8082, 8083
                       -> creating them as separate microservice
                       -> 3 sb projects -> book, author, order

-> communicate -> APIs 
-> SB microservices architecture -> register these service somewhere
   
-> use tools
-> Eureka server -> service discovery -> services are registered on eureka server
-> API gateway -> routing and load balancing 

-> 3 sb projects -> microservices 
-> sb project -> eureka server
-> sb project -> api gateway

Eureka Server -> Service Discovery
              -> is a service registry -> provided by spring cloud -> Netflix
              -> allows microservices to register themselves and discover other services as well
              -> services should interact 
              -> port no -> 8761

API Gateway  -> Routing and Load Balancing
             -> single entry point for all miroservices
             -> 8080 port no. -> / books -> 8081
                                 / authors -> 8082
             -> handle request routing 
             -> /8081/books -> 8080/books
             -> client does not directly interact with microserveice
             -> request comes from client -> API gateway -> route the request to appropriate microservice
             -> enhancing security
             -> supports load balancing -> traffic efficiently
             -> sb project -> Spring CLoud -> Gateway

 
Various annotations, new dependencies        

Eureka server should be running -> 8761 -> dashboard
microservices -> book -> enable eureka client -> 

---------------------------------------------------------------------------------

Ecommerce Application :

-> User microservice -> customers -> registers -> users table -> 
-> Product microservice -> products 
    -> db 
    -> products -> id, name, description, price, stock
      
-> order processing microservice ->orders, track order status

User microservice, eureka server -> register user microservice , api gateway -> route the user microservice

Implement API Gateway

-> act as a single entry point for microservices

/users/** -> all these kind of request -> User Service

localhost:8081/users -> localhost:8080/users

spring:
  cloud:
    gateway:
      routes:
        - id: user-microservice
          uri: lb://user-microservice
          predicates:
            - Path=/users/**

spring cloud gateway -> using reactive -> reqs processes -> non blocking synchronous manner

Product Microservice -> 8082

-> API Gateway -> 8080/products

























